{"version":3,"sources":["webpack://core-next-validation/webpack/universalModuleDefinition","webpack://core-next-validation/webpack/bootstrap","webpack://core-next-validation/./src/validationError.js","webpack://core-next-validation/./src/schemaGenerator.js","webpack://core-next-validation/./src/functions.js","webpack://core-next-validation/./src/index.js","webpack://core-next-validation/./src/validationFramework.js","webpack://core-next-validation/./src/api.js","webpack://core-next-validation/./src/validatorContext.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ERROR_CODES","INVALID_TYPE","ENUM_MISMATCH","ANY_OF_MISSING","ONE_OF_MISSING","ONE_OF_MULTIPLE","NOT_PASSED","NUMBER_MULTIPLE_OF","NUMBER_MINIMUM","NUMBER_MINIMUM_EXCLUSIVE","NUMBER_MAXIMUM","NUMBER_MAXIMUM_EXCLUSIVE","NUMBER_NOT_A_NUMBER","STRING_LENGTH_SHORT","STRING_LENGTH_LONG","STRING_PATTERN","OBJECT_PROPERTIES_MINIMUM","OBJECT_PROPERTIES_MAXIMUM","OBJECT_REQUIRED","OBJECT_ADDITIONAL_PROPERTIES","OBJECT_DEPENDENCY_KEY","ARRAY_LENGTH_SHORT","ARRAY_LENGTH_LONG","ARRAY_UNIQUE","ARRAY_ADDITIONAL_ITEMS","FORMAT_CUSTOM","KEYWORD_CUSTOM","CIRCULAR_REFERENCE","UNKNOWN_PROPERTY","ErrorCodeLookup","ERROR_MESSAGES_DEFAULT","ValidationError","constructor","undefined","code","Error","message","params","dataPath","schemaPath","subErrors","err","stack","stacktrace","err2","prefixWith","dataPrefix","schemaPrefix","length","SCHEMA_HEADER","$schema","title","description","type","properties","data","dkey","obj","keys","Array","Number","String","URI_TEMPLATE_GLOBAL_MODIFIERS","+","#",".","/",";","?","&","URI_TEMPLATE_SUFFICES","*","parseURI","url","href","protocol","authority","host","hostname","port","pathname","search","hash","removeDotSegments","input","output","resolveUrl","base","normSchema","getDocumentUri","uri","isTrustedUrl","baseUrl","testUrl","remainder","schema","baseUri","id","ValidationFramework","SchemaGenerator","_validationError","_myValidator","_api2","default","addLanguage","supportsValidation","registerSchema","addSchema","identity","getSchema","getSchemas","getSchemaMap","clearSchemas","dropSchemas","validate","validateMultiple","getValidationMessages","error","generateSchema","model","_schemaGenerator2","_functions","languages","createApi","language","_myContext","ValidatorContext","currentLanguage","addFormat","format","validator","messageMap","rootCode","freshApi","result","checkRecursive","banUnknownProperties","context","$ref","missing","valid","validateResult","apply","_arguments","urlHistory","getSchemaUris","getMissingUris","defineKeyword","defineError","codeName","codeNumber","defaultMessage","test","langCode","reset","errorCodes","CLOSE_ENOUGH_LOW","Math","CLOSE_ENOUGH_HIGH","missingMap","formatValidators","parent","schemas","collectMultiple","errors","handleError","returnError","scanned","scannedFrozen","scannedFrozenSchemas","scannedFrozenValidationErrors","validatedSchemasKey","validationErrorsKey","trackUnknownProperties","knownPropertyPaths","unknownPropertyPaths","errorMessages","definedKeywords","notReallyPercentEncode","encodeURI","string","replace","doubleEncoded","uriTemplateSubstitution","modifier","spec","separator","prefix","shouldEscape","showVariables","trimEmptyString","varNames","varList","varSpecs","varSpecMap","varName","truncate","parts","parseInt","suffices","varSpec","subFunction","valueFunction","startIndex","isFunction","j","encodeURIComponent","first","substitution","recursiveCompare","A","B","keyword","push","keywordFunction","createError","messageTemplate","JSON","messageParams","whole","subValue","collectError","prefixErrors","unknownPath","path","resolveRefs","urls","fragment","pointerPath","decodeURIComponent","component","searchSchemas","map","list","filterRegExp","validateAll","topLevel","frozenIndex","startErrorCount","scannedFrozenSchemaIndex","scannedSchemasIndex","schemaIndex","concat","indexOf","frozenSchemaIndex","configurable","e","errorCount","validateBasic","dataPointerPath","validateNumeric","validateString","validateArray","validateObject","validateCombinations","validateHypermedia","validateFormat","validateDefinedKeywords","pop","dataPathParts","schemaPathParts","dataPart","schemaPart","slice","errorMessage","validationFunctions","func","validateType","dataType","allowedTypes","expected","validateEnum","enumVal","validateMultipleOf","validateMinMax","validateNaN","multipleOf","divisibleBy","minimum","maximum","isNaN","Infinity","validateStringLength","validateStringPattern","minLength","maxLength","RegExp","pattern","regexp","validateArrayLength","validateArrayUniqueItems","validateArrayItems","minItems","maxItems","uniqueItems","match1","match2","items","additionalItems","validateObjectMinMaxProperties","validateObjectRequiredProperties","validateObjectProperties","validateObjectDependencies","minProperties","propertyCount","maxProperties","keyPointerPath","foundMatch","patternKey","patternProperties","additionalProperties","depKey","dependencies","dep","lenth","requiredKey","validateAllOf","validateAnyOf","validateOneOf","validateNot","subSchema","oldUnknownPropertyPaths","oldKnownPropertyPaths","errorAtEnd","knownKey","unknownKey","validIndex","index1","index2","oldErrorCount","not","notErrors","links","ldo","template","UriTemplate","allPresent","ll"],"mappings":"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","file":"core-next-validation.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"core-next-validation\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"core-next-validation\"] = factory();\n\telse\n\t\troot[\"core-next-validation\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","const ERROR_CODES = {\n  INVALID_TYPE: 0,\n  ENUM_MISMATCH: 1,\n  ANY_OF_MISSING: 10,\n  ONE_OF_MISSING: 11,\n  ONE_OF_MULTIPLE: 12,\n  NOT_PASSED: 13,\n  // Numeric errors\n  NUMBER_MULTIPLE_OF: 100,\n  NUMBER_MINIMUM: 101,\n  NUMBER_MINIMUM_EXCLUSIVE: 102,\n  NUMBER_MAXIMUM: 103,\n  NUMBER_MAXIMUM_EXCLUSIVE: 104,\n  NUMBER_NOT_A_NUMBER: 105,\n  // String errors\n  STRING_LENGTH_SHORT: 200,\n  STRING_LENGTH_LONG: 201,\n  STRING_PATTERN: 202,\n  // Object errors\n  OBJECT_PROPERTIES_MINIMUM: 300,\n  OBJECT_PROPERTIES_MAXIMUM: 301,\n  OBJECT_REQUIRED: 302,\n  OBJECT_ADDITIONAL_PROPERTIES: 303,\n  OBJECT_DEPENDENCY_KEY: 304,\n  // Array errors\n  ARRAY_LENGTH_SHORT: 400,\n  ARRAY_LENGTH_LONG: 401,\n  ARRAY_UNIQUE: 402,\n  ARRAY_ADDITIONAL_ITEMS: 403,\n  // Custom/user-defined errors\n  FORMAT_CUSTOM: 500,\n  KEYWORD_CUSTOM: 501,\n  // Schema structure\n  CIRCULAR_REFERENCE: 600,\n  // Non-standard validation options\n  UNKNOWN_PROPERTY: 1000\n};\n\n// TODO: bundle this\nconst ERROR_MESSAGES_DEFAULT = {\n  INVALID_TYPE: \"Invalid type: {type} (expected {expected})\",\n  ENUM_MISMATCH: \"No enum match for: {value}\",\n  ANY_OF_MISSING: \"Data does not match any schemas from \\\"anyOf\\\"\",\n  ONE_OF_MISSING: \"Data does not match any schemas from \\\"oneOf\\\"\",\n  ONE_OF_MULTIPLE: \"Data is valid against more than one schema from \\\"oneOf\\\": indices {index1} and {index2}\",\n  NOT_PASSED: \"Data matches schema from \\\"not\\\"\",\n  // Numeric errors\n  NUMBER_MULTIPLE_OF: \"Value {value} is not a multiple of {multipleOf}\",\n  NUMBER_MINIMUM: \"Value {value} is less than minimum {minimum}\",\n  NUMBER_MINIMUM_EXCLUSIVE: \"Value {value} is equal to exclusive minimum {minimum}\",\n  NUMBER_MAXIMUM: \"Value {value} is greater than maximum {maximum}\",\n  NUMBER_MAXIMUM_EXCLUSIVE: \"Value {value} is equal to exclusive maximum {maximum}\",\n  NUMBER_NOT_A_NUMBER: \"Value {value} is not a valid number\",\n  // String errors\n  STRING_LENGTH_SHORT: \"String is too short ({length} chars), minimum {minimum}\",\n  STRING_LENGTH_LONG: \"String is too long ({length} chars), maximum {maximum}\",\n  STRING_PATTERN: \"String does not match pattern: {pattern}\",\n  // Object errors\n  OBJECT_PROPERTIES_MINIMUM: \"Too few properties defined ({propertyCount}), minimum {minimum}\",\n  OBJECT_PROPERTIES_MAXIMUM: \"Too many properties defined ({propertyCount}), maximum {maximum}\",\n  OBJECT_REQUIRED: \"Missing required property: {key}\",\n  OBJECT_ADDITIONAL_PROPERTIES: \"Additional properties not allowed\",\n  OBJECT_DEPENDENCY_KEY: \"Dependency failed - key must exist: {missing} (due to key: {key})\",\n  // Array errors\n  ARRAY_LENGTH_SHORT: \"Array is too short ({length}), minimum {minimum}\",\n  ARRAY_LENGTH_LONG: \"Array is too long ({length}), maximum {maximum}\",\n  ARRAY_UNIQUE: \"Array items are not unique (indices {match1} and {match2})\",\n  ARRAY_ADDITIONAL_ITEMS: \"Additional items not allowed\",\n  // Format errors\n  FORMAT_CUSTOM: \"Format validation failed ({message})\",\n  KEYWORD_CUSTOM: \"Keyword failed: {key} ({message})\",\n  // Schema structure\n  CIRCULAR_REFERENCE: \"Circular $refs: {urls}\",\n  // Non-standard validation options\n  UNKNOWN_PROPERTY: \"Unknown property (not in schema)\"\n};\n\nclass ValidationError { //extends Error {\n  constructor(code, message, params, dataPath, schemaPath, subErrors) {\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\n    //super(code, message, params);\n    //Error.call(this);\n    if (code === undefined) {\n      throw new Error (\"No code supplied for error: \"+ message);\n    }\n    this.message = message;\n    this.params = params;\n    this.code = code;\n    this.dataPath = dataPath || \"\";\n    this.schemaPath = schemaPath || \"\";\n    this.subErrors = subErrors || null;\n\n    const err = new Error(this.message);\n    this.stack = err.stack || err.stacktrace;\n    if (!this.stack) {\n      try {\n        throw err;\n      } catch(err2) {\n        this.stack = err2.stack || err2.stacktrace;\n      }\n    }\n    this.name = \"ValidationError\";\n  };\n\n  prefixWith(dataPrefix, schemaPrefix) {\n    if (dataPrefix !== null) {\n      dataPrefix = dataPrefix.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n      this.dataPath = \"/\" + dataPrefix + this.dataPath;\n    }\n    if (schemaPrefix !== null) {\n      schemaPrefix = schemaPrefix.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n      this.schemaPath = \"/\" + schemaPrefix + this.schemaPath;\n    }\n    if (this.subErrors !== null) {\n      let i = 0, l = this.subErrors.length;\n      for (i = 0; i < l; i++) {\n        this.subErrors[i].prefixWith(dataPrefix, schemaPrefix);\n      }\n    }\n    return this;\n  };\n};\n\nlet ErrorCodeLookup = {}, key;\nfor (key in ERROR_CODES) {\n  ErrorCodeLookup[ERROR_CODES[key]] = key;\n}\n\nexport { ERROR_CODES, ERROR_MESSAGES_DEFAULT, ValidationError, ErrorCodeLookup };\n","const SCHEMA_HEADER = {\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"model\",\n  \"description\": \"Generated Schema\",\n  \"type\": \"object\",\n  \"properties\": { }\n};\n\n/**\n * <p>Augmented.Utility.SchemaGenerator<br/>\n *\n * Genrate a schema from a set of data</p>\n * @param {object} data a dataset to produce a schema from\n * @memberof Utility\n */\nconst SchemaGenerator = (data) => {\n  let obj = SCHEMA_HEADER;\n  let i, d, dkey, p, keys = Object.keys(data), l = keys.length;\n  for (i = 0; i < l; i++) {\n    d = keys[i];\n    for (dkey in d) {\n      if (d.hasOwnProperty(dkey)) {\n        p = obj.properties[d] = {};\n\n        let t = (typeof data[d]);\n        if (t === \"object\") {\n          t = (Array.isArray(data[d])) ? \"array\" : \"object\";\n        } else if (t === \"number\") {\n          t = (Number.isInteger(data[d])) ? \"integer\" : \"number\";\n        }\n        p.type = t;\n        p.description = String(d);\n      }\n    }\n  }\n  return obj;\n};\n\nexport default SchemaGenerator;\n","/**\n * @see https://github.com/geraintluff/uri-templates\n * but with all the de-substitution stuff removed\n */\nexport const URI_TEMPLATE_GLOBAL_MODIFIERS = {\n  \"+\": true,\n  \"#\": true,\n  \".\": true,\n  \"/\": true,\n  \";\": true,\n  \"?\": true,\n  \"&\": true\n};\n\nexport const URI_TEMPLATE_SUFFICES = {\n  \"*\": true\n};\n\n// parseURI() and resolveUrl() are from https://gist.github.com/1088850\n// - released as public domain by author (\"Yaffle\") - see comments on\n// gist\nexport const parseURI = (url) => {\n  const m = String(url).replace(/^\\s+|\\s+$/g, '').match(/^([^:\\/?#]+:)?(\\/\\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\\/?#]*)(?::(\\d*))?))?([^?#]*)(\\?[^#]*)?(#[\\s\\S]*)?/);\n  // authority = '//' + user + ':' + pass '@' + hostname + ':' port\n  return (m ? {\n    href     : m[0] || '',\n    protocol : m[1] || '',\n    authority: m[2] || '',\n    host     : m[3] || '',\n    hostname : m[4] || '',\n    port     : m[5] || '',\n    pathname : m[6] || '',\n    search   : m[7] || '',\n    hash     : m[8] || ''\n  } : null);\n};\n\nexport const removeDotSegments = (input) => {\n  let output = [];\n  input.replace(/^(\\.\\.?(\\/|$))+/, '')\n       .replace(/\\/(\\.(\\/|$))+/g, '/')\n       .replace(/\\/\\.\\.$/, '/../')\n       .replace(/\\/?[^\\/]*/g, function (p) {\n    if (p === '/..') {\n      output.pop();\n    } else {\n      output.push(p);\n    }\n  });\n  return output.join('').replace(/^\\//, input.charAt(0) === '/' ? '/' : '');\n};\n\nexport const resolveUrl = (base, href) => {// RFC 3986\n  href = parseURI(href || '');\n  base = parseURI(base || '');\n\n  return !href || !base ? null : (href.protocol || base.protocol) +\n  (href.protocol || href.authority ? href.authority : base.authority) +\n  removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : (href.pathname ? ((base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname) : base.pathname)) +\n  (href.protocol || href.authority || href.pathname ? href.search : (href.search || base.search)) +\n  href.hash;\n};\n\nexport const getDocumentUri = (uri) => {\n  return uri.split('#')[0];\n};\n\nexport const isTrustedUrl = (baseUrl, testUrl) => {\n  if(testUrl.substring(0, baseUrl.length) === baseUrl){\n    let remainder = testUrl.substring(baseUrl.length);\n    if ((testUrl.length > 0 && testUrl.charAt(baseUrl.length - 1) === \"/\") || remainder.charAt(0) === \"#\" || remainder.charAt(0) === \"?\") {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport const normSchema = (schema, baseUri) => {\n  if (schema && typeof schema === \"object\") {\n    if (baseUri === undefined) {\n      baseUri = schema.id;\n    } else if (typeof schema.id === \"string\") {\n      baseUri = resolveUrl(baseUri, schema.id);\n      schema.id = baseUri;\n    }\n    if (Array.isArray(schema)) {\n      let i = 0, l = schema.length;\n      for (i = 0; i < l; i++) {\n        normSchema(schema[i], baseUri);\n      }\n    } else {\n      if (typeof schema['$ref'] === \"string\") {\n        schema['$ref'] = resolveUrl(baseUri, schema['$ref']);\n      }\n      for (let key in schema) {\n        if (key !== \"enum\") {\n          normSchema(schema[key], baseUri);\n        }\n      }\n    }\n  }\n};\n","import ValidationFramework from \"./validationFramework.js\";\nimport SchemaGenerator from \"./schemaGenerator.js\";\n\nmodule.exports.ValidationFramework = ValidationFramework;\nmodule.exports.SchemaGenerator = SchemaGenerator;\n","import SchemaGenerator from \"./schemaGenerator.js\";\nimport createApi from \"./api.js\";\nimport { ERROR_MESSAGES_DEFAULT } from \"./validationError.js\";\n\n/**\n * Augmented.ValidationFramework -\n * The Validation Framework Base Wrapper Class.\n * Provides abstraction for base validation build-in library\n */\nclass ValidationFramework {\n  constructor() {\n    this._myValidator = createApi();\n    if (this._myValidator) {\n      this._myValidator.addLanguage(\"en-us\", ERROR_MESSAGES_DEFAULT);  // changed to US\n    }\n  };\n\n  /**\n   * Returns if the framework supports validation\n   * @returns {boolean} Returns true if the framework supports validation\n   */\n  supportsValidation() {\n    return (this._myValidator !== null);\n  };\n\n  /**\n   * Registers a schema to the Framework\n   * @param {string} identity The identity of the schema\n   * @param {object} schema The JSON schema\n   * @returns {boolean} Returns true on success\n   */\n  registerSchema(identity, schema) {\n    return this._myValidator.addSchema(identity, schema);\n  };\n\n  /**\n   * Gets a schema\n   * @param {string} identity The identity of the schema\n   * @returns {object} The JSON schema\n   */\n  getSchema(identity) {\n    return this._myValidator.getSchema(identity);\n  };\n\n  /**\n   * Gets all schemas\n   * @returns {array} all JSON schemas\n   */\n  getSchemas() {\n    return this._myValidator.getSchemaMap();\n  };\n\n  /**\n   * Clears all schemas\n   */\n  clearSchemas() {\n    this._myValidator.dropSchemas();\n  };\n\n  /**\n   * Validates data via a schema\n   * @param {object} data The data to validate\n   * @param {object} schema The JSON schema\n   * @returns {object} Returns the validation object\n   */\n  validate(data, schema) {\n    return this._myValidator.validateMultiple(data, schema);\n  };\n\n  /**\n   * Validates data via a schema\n   * @returns {array} Returns the validation messages\n   */\n  getValidationMessages() {\n    return this._myValidator.error;\n  };\n\n  /**\n   * Validates data via a schema\n   * @param {Augmented.Model|object} model The model generate from\n   * @returns {object} Returns the schema\n   */\n  generateSchema(model) {\n    let data = model;\n    /*TODO support model\n    if (model && model instanceof Model) {\n      data = model.toJSON();\n    }*/\n    return SchemaGenerator(data);\n  };\n};\n\nexport default ValidationFramework;\n","import ValidatorContext from \"./validatorContext.js\";\nimport { ErrorCodeLookup, ERROR_CODES, ERROR_MESSAGES_DEFAULT } from \"./validationError.js\";\nimport { normSchema, resolveUrl, getDocumentUri } from \"./functions.js\";\n\nlet languages = {};\n\nconst createApi = (language) => {\n  const _myContext = new ValidatorContext();\n  let currentLanguage = language || 'en';\n\n  const api = {\n    addFormat: (format, validator) => {\n      _myContext.addFormat(format, validator);\n    },\n    language: (code) => {\n      if (!code) {\n        return currentLanguage;\n      }\n      if (!languages[code]) {\n        code = code.split('-')[0]; // fall back to base\n        // language\n      }\n      if (languages[code]) {\n        currentLanguage = code;\n        return code; // so you can tell if fall-back has happened\n      }\n      return false;\n    },\n    addLanguage: (code, messageMap) => {\n      let key;\n      for (key in ERROR_CODES) {\n        if (messageMap[key] && !messageMap[ERROR_CODES[key]]) {\n          messageMap[ERROR_CODES[key]] = messageMap[key];\n        }\n      }\n      let rootCode = code.split('-')[0];\n      if (!languages[rootCode]) { // use for base language if\n        // not yet defined\n        languages[code] = messageMap;\n        languages[rootCode] = messageMap;\n      } else {\n        languages[code] = Object.create(languages[rootCode]);\n        for (key in messageMap) {\n          if (typeof languages[rootCode][key] === 'undefined') {\n            languages[rootCode][key] = messageMap[key];\n          }\n          languages[code][key] = messageMap[key];\n        }\n      }\n      return this;\n    },\n    freshApi: (language) => {\n      const result = createApi();\n      if (language) {\n        result.language(language);\n      }\n      return result;\n    },\n    validate: (data, schema, checkRecursive, banUnknownProperties) => {\n      const context = new ValidatorContext(_myContext, false, languages[currentLanguage], checkRecursive, banUnknownProperties);\n      if (typeof schema === \"string\") {\n        schema = {\"$ref\": schema};\n      }\n      context.addSchema(\"\", schema);\n      let error = context.validateAll(data, schema, null, null, \"\");\n      if (!error && banUnknownProperties) {\n        error = context.banUnknownProperties();\n      }\n      this.error = error;\n      this.missing = context.missing;\n      this.valid = (error === null);\n      return this.valid;\n    },\n    validateResult: () => {\n      let result = {};\n      this.validate.apply(result, arguments);\n      return result;\n    },\n    validateMultiple: (data, schema, checkRecursive, banUnknownProperties) => {\n      const context = new ValidatorContext(_myContext, true, languages[currentLanguage], checkRecursive, banUnknownProperties);\n      if (typeof schema === \"string\") {\n        schema = {\"$ref\": schema};\n      }\n      context.addSchema(\"\", schema);\n      context.validateAll(data, schema, null, null, \"\");\n      if (banUnknownProperties) {\n        context.banUnknownProperties();\n      }\n      let result = {};\n      result.errors = context.errors;\n      result.missing = context.missing;\n      result.valid = (result.errors.length === 0);\n      return result;\n    },\n    addSchema: (url, schema) => {\n      return _myContext.addSchema(url, schema);\n    },\n    getSchema: (url, urlHistory) => {\n      return _myContext.getSchema(url, urlHistory);\n    },\n    getSchemaMap: () => {\n      return _myContext.getSchemaMap.apply(_myContext, arguments);\n    },\n    getSchemaUris: () => {\n      return _myContext.getSchemaUris.apply(_myContext, arguments);\n    },\n    getMissingUris: () => {\n      return _myContext.getMissingUris.apply(_myContext, arguments);\n    },\n    dropSchemas: () => {\n      _myContext.dropSchemas.apply(_myContext, arguments);\n    },\n    defineKeyword: () => {\n      _myContext.defineKeyword.apply(_myContext, arguments);\n    },\n    defineError: (codeName, codeNumber, defaultMessage) => {\n      if (typeof codeName !== 'string' || !/^[A-Z]+(_[A-Z]+)*$/.test(codeName)) {\n        // TODO message bundle this\n        throw new Error('Code name must be a string in UPPER_CASE_WITH_UNDERSCORES');\n      }\n      if (typeof codeNumber !== 'number' || codeNumber%1 !== 0 || codeNumber < 10000) {\n        // TODO message bundle this\n        throw new Error('Code number must be an integer > 10000');\n      }\n      if (typeof ERROR_CODES[codeName] !== 'undefined') {\n        // TODO message bundle this\n        throw new Error('Error already defined: ' + codeName + ' as ' + ERROR_CODES[codeName]);\n      }\n      if (typeof ErrorCodeLookup[codeNumber] !== 'undefined') {\n        // TODO message bundle this\n        throw new Error('Error code already used: ' + ErrorCodeLookup[codeNumber] + ' as ' + codeNumber);\n      }\n      ERROR_CODES[codeName] = codeNumber;\n      ErrorCodeLookup[codeNumber] = codeName;\n      ERROR_MESSAGES_DEFAULT[codeName] = ERROR_MESSAGES_DEFAULT[codeNumber] = defaultMessage;\n      for (let langCode in languages) {\n        let language = languages[langCode];\n        if (language[codeName]) {\n          language[codeNumber] = language[codeNumber] || language[codeName];\n        }\n      }\n    },\n    reset: () => {\n      _myContext.reset();\n      this.error = null;\n      this.missing = [];\n      this.valid = true;\n    },\n    missing: [],\n    error: null,\n    valid: true,\n    normSchema: normSchema,\n    resolveUrl: resolveUrl,\n    getDocumentUri: getDocumentUri,\n    errorCodes: ERROR_CODES\n  };\n  return api;\n};\n\nexport default createApi;\n","import { ValidationError, ERROR_CODES, ERROR_MESSAGES_DEFAULT } from \"./validationError.js\";\nimport { normSchema, getDocumentUri } from \"./functions.js\";\n\nlet CLOSE_ENOUGH_LOW = Math.pow(2, -51);\nlet CLOSE_ENOUGH_HIGH = 1 - CLOSE_ENOUGH_LOW;\n\nclass ValidatorContext {\n  constructor(parent, collectMultiple, errorMessages, checkRecursive, trackUnknownProperties) {\n    this.missing = [];\n    this.missingMap = {};\n    this.formatValidators = parent ? Object.create(parent.formatValidators) : {};\n    this.schemas = parent ? Object.create(parent.schemas) : {};\n    this.collectMultiple = collectMultiple;\n    this.errors = [];\n    this.handleError = collectMultiple ? this.collectError : this.returnError;\n    if (checkRecursive) {\n      this.checkRecursive = true;\n      this.scanned = [];\n      this.scannedFrozen = [];\n      this.scannedFrozenSchemas = [];\n      this.scannedFrozenValidationErrors = [];\n      this.validatedSchemasKey = 'tv4_validation_id';\n      this.validationErrorsKey = 'tv4_validation_errors_id';\n    }\n    if (trackUnknownProperties) {\n      this.trackUnknownProperties = true;\n      this.knownPropertyPaths = {};\n      this.unknownPropertyPaths = {};\n    }\n    this.errorMessages = errorMessages;\n    this.definedKeywords = {};\n    if (parent) {\n      for (let key in parent.definedKeywords) {\n        this.definedKeywords[key] = parent.definedKeywords[key].slice(0);\n      }\n    }\n  };\n\n  notReallyPercentEncode(string) {\n    return encodeURI(string).replace(/%25[0-9][0-9]/g, (doubleEncoded) => {\n      return \"%\" + doubleEncoded.substring(3);\n    });\n  };\n\n  uriTemplateSubstitution(spec) {\n    let modifier = \"\";\n    if (URI_TEMPLATE_GLOBAL_MODIFIERS[spec.charAt(0)]) {\n      modifier = spec.charAt(0);\n      spec = spec.substring(1);\n    }\n    let separator = \"\";\n    let prefix = \"\";\n    let shouldEscape = true;\n    let showVariables = false;\n    let trimEmptyString = false;\n    if (modifier === '+') {\n      shouldEscape = false;\n    } else if (modifier === \".\") {\n      prefix = \".\";\n      separator = \".\";\n    } else if (modifier === \"/\") {\n      prefix = \"/\";\n      separator = \"/\";\n    } else if (modifier === '#') {\n      prefix = \"#\";\n      shouldEscape = false;\n    } else if (modifier === ';') {\n      prefix = \";\";\n      separator = \";\";\n      showVariables = true;\n      trimEmptyString = true;\n    } else if (modifier === '?') {\n      prefix = \"?\";\n      separator = \"&\";\n      showVariables = true;\n    } else if (modifier === '&') {\n      prefix = \"&\";\n      separator = \"&\";\n      showVariables = true;\n    }\n\n    let varNames = [];\n    let varList = spec.split(\",\");\n    let varSpecs = [];\n    let varSpecMap = {};\n    let i = 0, l = varList.length;\n    for (i = 0; i < l; i++) {\n      let varName = varList[i];\n      let truncate = null;\n      if (varName.indexOf(\":\") !== -1) {\n        let parts = varName.split(\":\");\n        varName = parts[0];\n        truncate = parseInt(parts[1], 10);\n      }\n      let suffices = {};\n      while (URI_TEMPLATE_SUFFICES[varName.charAt(varName.length - 1)]) {\n        suffices[varName.charAt(varName.length - 1)] = true;\n        varName = varName.substring(0, varName.length - 1);\n      }\n      let varSpec = {\n        truncate: truncate,\n        name: varName,\n        suffices: suffices\n      };\n      varSpecs.push(varSpec);\n      varSpecMap[varName] = varSpec;\n      varNames.push(varName);\n    }\n\n    const subFunction = (valueFunction) => {\n      let result = \"\";\n      let startIndex = 0;\n      let i = 0, l = varSpecs.length;\n      for (i = 0; i < l; i++) {\n        let varSpec = varSpecs[i];\n\n        if (!valueFunction && !isFunction(valueFunction)) {\n          throw new Error(\"Problem qith value function.\");\n        }\n\n        let value = valueFunction(varSpec.name);\n        if (value === null || value === undefined || (Array.isArray(value) && value.length === 0) || (typeof value === 'object' && Object.keys(value).length === 0)) {\n          startIndex++;\n          continue;\n        }\n        if (i === startIndex) {\n          result += prefix;\n        } else {\n          result += (separator || \",\");\n        }\n        if (Array.isArray(value)) {\n          if (showVariables) {\n            result += varSpec.name + \"=\";\n          }\n          let j = 0;\n          l = value.length;\n          for (j = 0; j < l; j++) {\n            if (j > 0) {\n              result += varSpec.suffices['*'] ? (separator || \",\") : \",\";\n              if (varSpec.suffices['*'] && showVariables) {\n                result += varSpec.name + \"=\";\n              }\n            }\n            result += shouldEscape ? encodeURIComponent(value[j]).replace(/!/g, \"%21\") : this.notReallyPercentEncode(value[j]);\n          }\n        } else if (typeof value === \"object\") {\n          if (showVariables && !varSpec.suffices['*']) {\n            result += varSpec.name + \"=\";\n          }\n          let first = true;\n          for (let key in value) {\n            if (!first) {\n              result += varSpec.suffices['*'] ? (separator || \",\") : \",\";\n            }\n            first = false;\n            result += shouldEscape ? encodeURIComponent(key).replace(/!/g, \"%21\") : this.notReallyPercentEncode(key);\n            result += varSpec.suffices['*'] ? '=' : \",\";\n            result += shouldEscape ? encodeURIComponent(value[key]).replace(/!/g, \"%21\") : this.notReallyPercentEncode(value[key]);\n          }\n        } else {\n          if (showVariables) {\n            result += varSpec.name;\n            if (!trimEmptyString || value !== \"\") {\n              result += \"=\";\n            }\n          }\n          if (varSpec.truncate !== null) {\n            value = value.substring(0, varSpec.truncate);\n          }\n          result += shouldEscape ? encodeURIComponent(value).replace(/!/g, \"%21\"): this.notReallyPercentEncode(value);\n        }\n      }\n      return result;\n    };\n    subFunction.varNames = varNames;\n    return {\n      prefix: prefix,\n      substitution: subFunction\n    };\n  };\n\n  recursiveCompare(A, B) {\n    if (A === B) {\n      return true;\n    }\n    if (typeof A === \"object\" && typeof B === \"object\") {\n      if (Array.isArray(A) !== Array.isArray(B)) {\n        return false;\n      } else if (Array.isArray(A)) {\n        if (A.length !== B.length) {\n          return false;\n        }\n        let i = 0, l = A.length;\n        for (i = 0; i < l; i++) {\n          if (!this.recursiveCompare(A[i], B[i])) {\n            return false;\n          }\n        }\n      } else {\n        let key;\n        for (key in A) {\n          if (B[key] === undefined && A[key] !== undefined) {\n            return false;\n          }\n        }\n        for (key in B) {\n          if (A[key] === undefined && B[key] !== undefined) {\n            return false;\n          }\n        }\n        for (key in A) {\n          if (!this.recursiveCompare(A[key], B[key])) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  };\n\n  defineKeyword(keyword, keywordFunction) {\n    this.definedKeywords[keyword] = this.definedKeywords[keyword] || [];\n    this.definedKeywords[keyword].push(keywordFunction);\n  };\n\n  createError(code, messageParams, dataPath, schemaPath, subErrors) {\n    let messageTemplate = this.errorMessages[code] || ERROR_MESSAGES_DEFAULT[code];\n    if (typeof messageTemplate !== 'string') {\n      return new ValidationError(code, \"Unknown error code \" + code + \": \" + JSON.stringify(messageParams), messageParams, dataPath, schemaPath, subErrors);\n    }\n    // Adapted from Crockford's supplant()\n    let message = messageTemplate.replace(/\\{([^{}]*)\\}/g, function (whole, varName) {\n      let subValue = messageParams[varName];\n      return typeof subValue === 'string' || typeof subValue === 'number' ? subValue : whole;\n    });\n    return new ValidationError(code, message, messageParams, dataPath, schemaPath, subErrors);\n  };\n  returnError(error) {\n    return error;\n  };\n\n  collectError(error) {\n    if (error) {\n      this.errors.push(error);\n    }\n    return null;\n  };\n\n  prefixErrors(startIndex, dataPath, schemaPath) {\n    let i = 0, l = this.errors.length;\n    for (i = startIndex; i < l; i++) {\n      this.errors[i] = this.errors[i].prefixWith(dataPath, schemaPath);\n    }\n    return this;\n  };\n\n  banUnknownProperties() {\n    for (let unknownPath in this.unknownPropertyPaths) {\n      let error = this.createError(ERROR_CODES.UNKNOWN_PROPERTY, {path: unknownPath}, unknownPath, \"\");\n      let result = this.handleError(error);\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  };\n  addFormat(format, validator) {\n    if (typeof format === 'object') {\n      for (let key in format) {\n        this.addFormat(key, format[key]);\n      }\n      return this;\n    }\n    this.formatValidators[format] = validator;\n  };\n  resolveRefs(schema, urlHistory) {\n    if (schema['$ref'] !== undefined) {\n      urlHistory = urlHistory || {};\n      if (urlHistory[schema['$ref']]) {\n        return this.createError(ERROR_CODES.CIRCULAR_REFERENCE, {urls: Object.keys(urlHistory).join(', ')}, '', '');\n      }\n      urlHistory[schema['$ref']] = true;\n      schema = this.getSchema(schema['$ref'], urlHistory);\n    }\n    return schema;\n  };\n  getSchema(url, urlHistory) {\n    let schema;\n    if (this.schemas[url] !== undefined) {\n      schema = this.schemas[url];\n      return this.resolveRefs(schema, urlHistory);\n    }\n    let baseUrl = url;\n    let fragment = \"\";\n    if (url.indexOf('#') !== -1) {\n      fragment = url.substring(url.indexOf(\"#\") + 1);\n      baseUrl = url.substring(0, url.indexOf(\"#\"));\n    }\n    if (typeof this.schemas[baseUrl] === 'object') {\n      schema = this.schemas[baseUrl];\n      let pointerPath = decodeURIComponent(fragment);\n      if (pointerPath === \"\") {\n        return this.resolveRefs(schema, urlHistory);\n      } else if (pointerPath.charAt(0) !== \"/\") {\n        return undefined;\n      }\n      let parts = pointerPath.split(\"/\").slice(1);\n      let i = 0, l = parts.length;\n      for (i = 0; i < l; i++) {\n        let component = parts[i].replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n        if (schema[component] === undefined) {\n          schema = undefined;\n          break;\n        }\n        schema = schema[component];\n      }\n      if (schema !== undefined) {\n        return this.resolveRefs(schema, urlHistory);\n      }\n    }\n    if (this.missing[baseUrl] === undefined) {\n      this.missing.push(baseUrl);\n      this.missing[baseUrl] = baseUrl;\n      this.missingMap[baseUrl] = baseUrl;\n    }\n  };\n  searchSchemas(schema, url) {\n    if (Array.isArray(schema)) {\n      let i = 0, l = schema.length;\n      for (i = 0; i < l; i++) {\n        this.searchSchemas(schema[i], url);\n      }\n    } else if (schema && typeof schema === \"object\") {\n      if (typeof schema.id === \"string\") {\n        if (isTrustedUrl(url, schema.id)) {\n          if (this.schemas[schema.id] === undefined) {\n            this.schemas[schema.id] = schema;\n          }\n        }\n      }\n      for (let key in schema) {\n        if (key !== \"enum\") {\n          if (typeof schema[key] === \"object\") {\n            this.searchSchemas(schema[key], url);\n          } else if (key === \"$ref\") {\n            let uri = getDocumentUri(schema[key]);\n            if (uri && this.schemas[uri] === undefined && this.missingMap[uri] === undefined) {\n              this.missingMap[uri] = uri;\n            }\n          }\n        }\n      }\n    }\n  };\n  addSchema(url, schema) {\n    // overload\n    if (typeof url !== 'string' || typeof schema === 'undefined') {\n      if (typeof url === 'object' && typeof url.id === 'string') {\n        schema = url;\n        url = schema.id;\n      } else {\n        return;\n      }\n    }\n    if (url === getDocumentUri(url) + \"#\") {\n      // Remove empty fragment\n      url = getDocumentUri(url);\n    }\n    this.schemas[url] = schema;\n    delete this.missingMap[url];\n    normSchema(schema, url);\n    this.searchSchemas(schema, url);\n  };\n\n  getSchemaMap() {\n    let map = {};\n    for (let key in this.schemas) {\n      map[key] = this.schemas[key];\n    }\n    return map;\n  };\n\n  getSchemaUris(filterRegExp) {\n    let list = [];\n    for (let key in this.schemas) {\n      if (!filterRegExp || filterRegExp.test(key)) {\n        list.push(key);\n      }\n    }\n    return list;\n  };\n\n  getMissingUris(filterRegExp) {\n    let list = [];\n    for (let key in this.missingMap) {\n      if (!filterRegExp || filterRegExp.test(key)) {\n        list.push(key);\n      }\n    }\n    return list;\n  };\n\n  dropSchemas() {\n    this.schemas = {};\n    this.reset();\n  };\n\n  reset() {\n    this.missing = [];\n    this.missingMap = {};\n    this.errors = [];\n  };\n\n  validateAll(data, schema, dataPathParts, schemaPathParts, dataPointerPath) {\n    let topLevel;\n    schema = this.resolveRefs(schema);\n\n    if (!schema) {\n      return null;\n    } else if (schema instanceof ValidationError) {\n      this.errors.push(schema);\n      return schema;\n    }\n\n    let startErrorCount = this.errors.length;\n    let frozenIndex, scannedFrozenSchemaIndex = null, scannedSchemasIndex = null;\n    if (this.checkRecursive && data && typeof data === 'object') {\n      topLevel = !this.scanned.length;\n      if (data[this.validatedSchemasKey]) {\n        let schemaIndex = data[this.validatedSchemasKey].indexOf(schema);\n        if (schemaIndex !== -1) {\n          this.errors = this.errors.concat(data[this.validationErrorsKey][schemaIndex]);\n          return null;\n        }\n      }\n      if (Object.isFrozen(data)) {\n        frozenIndex = this.scannedFrozen.indexOf(data);\n        if (frozenIndex !== -1) {\n          let frozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].indexOf(schema);\n          if (frozenSchemaIndex !== -1) {\n            this.errors = this.errors.concat(this.scannedFrozenValidationErrors[frozenIndex][frozenSchemaIndex]);\n            return null;\n          }\n        }\n      }\n      this.scanned.push(data);\n      if (Object.isFrozen(data)) {\n        if (frozenIndex === -1) {\n          frozenIndex = this.scannedFrozen.length;\n          this.scannedFrozen.push(data);\n          this.scannedFrozenSchemas.push([]);\n        }\n        scannedFrozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].length;\n        this.scannedFrozenSchemas[frozenIndex][scannedFrozenSchemaIndex] = schema;\n        this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = [];\n      } else {\n        if (!data[this.validatedSchemasKey]) {\n          try {\n            Object.defineProperty(data, this.validatedSchemasKey, {\n              value: [],\n              configurable: true\n            });\n            Object.defineProperty(data, this.validationErrorsKey, {\n              value: [],\n              configurable: true\n            });\n          } catch (e) {\n            // IE 7/8 workaround\n            data[this.validatedSchemasKey] = [];\n            data[this.validationErrorsKey] = [];\n          }\n        }\n        scannedSchemasIndex = data[this.validatedSchemasKey].length;\n        data[this.validatedSchemasKey][scannedSchemasIndex] = schema;\n        data[this.validationErrorsKey][scannedSchemasIndex] = [];\n      }\n    }\n\n    let errorCount = this.errors.length;\n    let error = this.validateBasic(data, schema, dataPointerPath) || this.validateNumeric(data, schema, dataPointerPath) || this.validateString(data, schema, dataPointerPath) || this.validateArray(data, schema, dataPointerPath) || this.validateObject(data, schema, dataPointerPath) || this.validateCombinations(data, schema, dataPointerPath) || this.validateHypermedia(data, schema, dataPointerPath) || this.validateFormat(data, schema, dataPointerPath) || this.validateDefinedKeywords(data, schema, dataPointerPath) || null;\n\n    if (topLevel) {\n      while (this.scanned.length) {\n        let item = this.scanned.pop();\n        delete item[this.validatedSchemasKey];\n      }\n      this.scannedFrozen = [];\n      this.scannedFrozenSchemas = [];\n    }\n\n    if (error || errorCount !== this.errors.length) {\n      while ((dataPathParts && dataPathParts.length) || (schemaPathParts && schemaPathParts.length)) {\n        let dataPart = (dataPathParts && dataPathParts.length) ? \"\" + dataPathParts.pop() : null;\n        let schemaPart = (schemaPathParts && schemaPathParts.length) ? \"\" + schemaPathParts.pop() : null;\n        if (error) {\n          error = error.prefixWith(dataPart, schemaPart);\n        }\n        this.prefixErrors(errorCount, dataPart, schemaPart);\n      }\n    }\n\n    if (scannedFrozenSchemaIndex !== null) {\n      this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = this.errors.slice(startErrorCount);\n    } else if (scannedSchemasIndex !== null) {\n      data[this.validationErrorsKey][scannedSchemasIndex] = this.errors.slice(startErrorCount);\n    }\n\n    return this.handleError(error);\n  };\n\n  validateFormat(data, schema) {\n    if (typeof schema.format !== 'string' || !this.formatValidators[schema.format]) {\n      return null;\n    }\n    let errorMessage = this.formatValidators[schema.format].call(null, data, schema);\n    if (typeof errorMessage === 'string' || typeof errorMessage === 'number') {\n      return this.createError(ERROR_CODES.FORMAT_CUSTOM, {message: errorMessage}).prefixWith(null, \"format\");\n    } else if (errorMessage && typeof errorMessage === 'object') {\n      return this.createError(ERROR_CODES.FORMAT_CUSTOM, {message: errorMessage.message || \"?\"}, errorMessage.dataPath || null, errorMessage.schemaPath || \"/format\");\n    }\n    return null;\n  };\n\n  validateDefinedKeywords(data, schema, dataPointerPath) {\n    for (let key in this.definedKeywords) {\n      if (typeof schema[key] === 'undefined') {\n        continue;\n      }\n      let validationFunctions = this.definedKeywords[key];\n      let i = 0, l = validationFunctions.length;\n      for (i = 0; i < l; i++) {\n        let func = validationFunctions[i];\n        let result = func(data, schema[key], schema, dataPointerPath);\n        if (typeof result === 'string' || typeof result === 'number') {\n          return this.createError(ERROR_CODES.KEYWORD_CUSTOM, {key: key, message: result}).prefixWith(null, \"format\");\n        } else if (result && typeof result === 'object') {\n          let code = result.code;\n          if (typeof code === 'string') {\n            if (!ERROR_CODES[code]) {\n              throw new Error('Undefined error code (use defineError): ' + code);\n            }\n            code = ERROR_CODES[code];\n          } else if (typeof code !== 'number') {\n            code = ERROR_CODES.KEYWORD_CUSTOM;\n          }\n          let messageParams = (typeof result.message === 'object') ? result.message : {key: key, message: result.message || \"?\"};\n          let schemaPath = result.schemaPath ||( \"/\" + key.replace(/~/g, '~0').replace(/\\//g, '~1'));\n          return this.createError(code, messageParams, result.dataPath || null, schemaPath);\n        }\n      }\n    }\n    return null;\n  };\n\n  validateBasic(data, schema, dataPointerPath) {\n    let error = this.validateType(data, schema, dataPointerPath);\n    if (error) {\n      return error.prefixWith(null, \"type\");\n    }\n      /*if (error = this.validateEnum(data, schema, dataPointerPath)) {\n      return error.prefixWith(null, \"type\");\n    }*/\n    return null;\n  };\n\n  validateType(data, schema) {\n    if (schema.type === undefined) {\n      return null;\n    }\n    let dataType = typeof data;\n    if (data === null) {\n      dataType = \"null\";\n    } else if (Array.isArray(data)) {\n      dataType = \"array\";\n    }\n    let allowedTypes = schema.type;\n    if (typeof allowedTypes !== \"object\") {\n      allowedTypes = [allowedTypes];\n    }\n\n    let i = 0, l = allowedTypes.length;\n    for (i = 0; i < l; i++) {\n      let type = allowedTypes[i];\n      if (type === dataType || (type === \"integer\" && dataType === \"number\" && (data % 1 === 0))) {\n        return null;\n      }\n    }\n    return this.createError(ERROR_CODES.INVALID_TYPE, {type: dataType, expected: allowedTypes.join(\"/\")});\n  };\n\n  validateEnum(data, schema) {\n    if (schema[\"enum\"] === undefined) {\n      return null;\n    }\n    let i = 0, l = schema[\"enum\"].length;\n    for (i = 0; i < l; i++) {\n      let enumVal = schema[\"enum\"][i];\n      if (this.recursiveCompare(data, enumVal)) {\n        return null;\n      }\n    }\n    return this.createError(ERROR_CODES.ENUM_MISMATCH, {value: (typeof JSON !== 'undefined') ? JSON.stringify(data) : data});\n  };\n\n  validateNumeric(data, schema, dataPointerPath) {\n    return this.validateMultipleOf(data, schema, dataPointerPath) || this.validateMinMax(data, schema, dataPointerPath) || this.validateNaN(data, schema, dataPointerPath) || null;\n  };\n\n  validateMultipleOf(data, schema) {\n    let multipleOf = schema.multipleOf || schema.divisibleBy;\n    if (multipleOf === undefined) {\n      return null;\n    }\n    if (typeof data === \"number\") {\n      let remainder = (data/multipleOf)%1;\n      if (remainder >= CLOSE_ENOUGH_LOW && remainder < CLOSE_ENOUGH_HIGH) {\n        return this.createError(ERROR_CODES.NUMBER_MULTIPLE_OF, {value: data, multipleOf: multipleOf});\n      }\n    }\n    return null;\n  };\n\n  validateMinMax(data, schema) {\n    if (typeof data !== \"number\") {\n      return null;\n    }\n    if (schema.minimum !== undefined) {\n      if (data < schema.minimum) {\n        return this.createError(ERROR_CODES.NUMBER_MINIMUM, {value: data, minimum: schema.minimum}).prefixWith(null, \"minimum\");\n      }\n      if (schema.exclusiveMinimum && data === schema.minimum) {\n        return this.createError(ERROR_CODES.NUMBER_MINIMUM_EXCLUSIVE, {value: data, minimum: schema.minimum}).prefixWith(null, \"exclusiveMinimum\");\n      }\n    }\n    if (schema.maximum !== undefined) {\n      if (data > schema.maximum) {\n        return this.createError(ERROR_CODES.NUMBER_MAXIMUM, {value: data, maximum: schema.maximum}).prefixWith(null, \"maximum\");\n      }\n      if (schema.exclusiveMaximum && data === schema.maximum) {\n        return this.createError(ERROR_CODES.NUMBER_MAXIMUM_EXCLUSIVE, {value: data, maximum: schema.maximum}).prefixWith(null, \"exclusiveMaximum\");\n      }\n    }\n    return null;\n  };\n\n  validateNaN(data) {\n    if (typeof data !== \"number\") {\n      return null;\n    }\n    if (isNaN(data) === true || data === Infinity || data === -Infinity) {\n      return this.createError(ERROR_CODES.NUMBER_NOT_A_NUMBER, {value: data}).prefixWith(null, \"type\");\n    }\n    return null;\n  };\n\n  validateString(data, schema, dataPointerPath) {\n    return this.validateStringLength(data, schema, dataPointerPath) || this.validateStringPattern(data, schema, dataPointerPath) || null;\n  };\n\n  validateStringLength(data, schema) {\n    if (typeof data !== \"string\") {\n      return null;\n    }\n    if (schema.minLength !== undefined) {\n      if (data.length < schema.minLength) {\n        return this.createError(ERROR_CODES.STRING_LENGTH_SHORT, {length: data.length, minimum: schema.minLength}).prefixWith(null, \"minLength\");\n      }\n    }\n    if (schema.maxLength !== undefined) {\n      if (data.length > schema.maxLength) {\n        return this.createError(ERROR_CODES.STRING_LENGTH_LONG, {length: data.length, maximum: schema.maxLength}).prefixWith(null, \"maxLength\");\n      }\n    }\n    return null;\n  };\n\n  validateStringPattern(data, schema) {\n    if (typeof data !== \"string\" || schema.pattern === undefined) {\n      return null;\n    }\n    let regexp = new RegExp(schema.pattern);\n    if (!regexp.test(data)) {\n      return this.createError(ERROR_CODES.STRING_PATTERN, {pattern: schema.pattern}).prefixWith(null, \"pattern\");\n    }\n    return null;\n  };\n  validateArray(data, schema, dataPointerPath) {\n    if (!Array.isArray(data)) {\n      return null;\n    }\n    return this.validateArrayLength(data, schema, dataPointerPath) || this.validateArrayUniqueItems(data, schema, dataPointerPath) || this.validateArrayItems(data, schema, dataPointerPath) || null;\n  };\n\n  validateArrayLength(data, schema) {\n    let error;\n    if (schema.minItems !== undefined) {\n      if (data.length < schema.minItems) {\n        error = (this.createError(ERROR_CODES.ARRAY_LENGTH_SHORT, {length: data.length, minimum: schema.minItems})).prefixWith(null, \"minItems\");\n        if (this.handleError(error)) {\n          return error;\n        }\n      }\n    }\n    if (schema.maxItems !== undefined) {\n      if (data.length > schema.maxItems) {\n        error = (this.createError(ERROR_CODES.ARRAY_LENGTH_LONG, {length: data.length, maximum: schema.maxItems})).prefixWith(null, \"maxItems\");\n        if (this.handleError(error)) {\n          return error;\n        }\n      }\n    }\n    return null;\n  };\n\n  validateArrayUniqueItems(data, schema) {\n    if (schema.uniqueItems) {\n      let i = 0, l = data.length;\n      for (i = 0; i < l; i++) {\n        let j = 0;\n        for (j = i + 1; j < l; j++) {\n          if (recursiveCompare(data[i], data[j])) {\n            let error = (this.createError(ERROR_CODES.ARRAY_UNIQUE, {match1: i, match2: j})).prefixWith(null, \"uniqueItems\");\n            if (this.handleError(error)) {\n              return error;\n            }\n          }\n        }\n      }\n    }\n    return null;\n  };\n\n  validateArrayItems(data, schema, dataPointerPath) {\n    if (schema.items === undefined) {\n      return null;\n    }\n    let error, i;\n    if (Array.isArray(schema.items)) {\n      let l = data.length;\n      for (i = 0; i < l; i++) {\n        if (i < schema.items.length) {\n          if (error = this.validateAll(data[i], schema.items[i], [i], [\"items\", i], dataPointerPath + \"/\" + i)) {\n            return error;\n          }\n        } else if (schema.additionalItems !== undefined) {\n          if (typeof schema.additionalItems === \"boolean\") {\n            if (!schema.additionalItems) {\n              error = (this.createError(ERROR_CODES.ARRAY_ADDITIONAL_ITEMS, {})).prefixWith(\"\" + i, \"additionalItems\");\n              if (this.handleError(error)) {\n                return error;\n              }\n            }\n          } else if (error = this.validateAll(data[i], schema.additionalItems, [i], [\"additionalItems\"], dataPointerPath + \"/\" + i)) {\n            return error;\n          }\n        }\n      }\n    } else {\n      let l = data.length;\n      for (i = 0; i < l; i++) {\n        if (error = this.validateAll(data[i], schema.items, [i], [\"items\"], dataPointerPath + \"/\" + i)) {\n          return error;\n        }\n      }\n    }\n    return null;\n  };\n\n  validateObject(data, schema, dataPointerPath) {\n    if (typeof data !== \"object\" || data === null || Array.isArray(data)) {\n      return null;\n    }\n    return this.validateObjectMinMaxProperties(data, schema, dataPointerPath) || this.validateObjectRequiredProperties(data, schema, dataPointerPath) || this.validateObjectProperties(data, schema, dataPointerPath) || this.validateObjectDependencies(data, schema, dataPointerPath) || null;\n  };\n\n  validateObjectMinMaxProperties(data, schema) {\n    let keys = Object.keys(data);\n    let error;\n    if (schema.minProperties !== undefined) {\n      if (keys.length < schema.minProperties) {\n        error = this.createError(ERROR_CODES.OBJECT_PROPERTIES_MINIMUM, {propertyCount: keys.length, minimum: schema.minProperties}).prefixWith(null, \"minProperties\");\n        if (this.handleError(error)) {\n          return error;\n        }\n      }\n    }\n    if (schema.maxProperties !== undefined) {\n      if (keys.length > schema.maxProperties) {\n        error = this.createError(ERROR_CODES.OBJECT_PROPERTIES_MAXIMUM, {propertyCount: keys.length, maximum: schema.maxProperties}).prefixWith(null, \"maxProperties\");\n        if (this.handleError(error)) {\n          return error;\n        }\n      }\n    }\n    return null;\n  };\n\n  validateObjectRequiredProperties(data, schema) {\n    if (schema.required !== undefined) {\n      let i = 0, l = schema.required.length;\n      for (i = 0; i < l; i++) {\n        let key = schema.required[i];\n        if (data[key] === undefined) {\n          let error = this.createError(ERROR_CODES.OBJECT_REQUIRED, {key: key}).prefixWith(null, \"\" + i).prefixWith(null, \"required\");\n          if (this.handleError(error)) {\n            return error;\n          }\n        }\n      }\n    }\n    return null;\n  };\n\n  validateObjectProperties(data, schema, dataPointerPath) {\n    let error;\n    for (let key in data) {\n      let keyPointerPath = dataPointerPath + \"/\" + key.replace(/~/g, '~0').replace(/\\//g, '~1');\n      let foundMatch = false;\n      if (schema.properties !== undefined && schema.properties[key] !== undefined) {\n        foundMatch = true;\n        if (error = this.validateAll(data[key], schema.properties[key], [key], [\"properties\", key], keyPointerPath)) {\n          return error;\n        }\n      }\n      if (schema.patternProperties !== undefined) {\n        for (let patternKey in schema.patternProperties) {\n          let regexp = new RegExp(patternKey);\n          if (regexp.test(key)) {\n            foundMatch = true;\n            if (error = this.validateAll(data[key], schema.patternProperties[patternKey], [key], [\"patternProperties\", patternKey], keyPointerPath)) {\n              return error;\n            }\n          }\n        }\n      }\n      if (!foundMatch) {\n        if (schema.additionalProperties !== undefined) {\n          if (this.trackUnknownProperties) {\n            this.knownPropertyPaths[keyPointerPath] = true;\n            delete this.unknownPropertyPaths[keyPointerPath];\n          }\n          if (typeof schema.additionalProperties === \"boolean\") {\n            if (!schema.additionalProperties) {\n              error = this.createError(ERROR_CODES.OBJECT_ADDITIONAL_PROPERTIES, {}).prefixWith(key, \"additionalProperties\");\n              if (this.handleError(error)) {\n                return error;\n              }\n            }\n          } else {\n            if (error = this.validateAll(data[key], schema.additionalProperties, [key], [\"additionalProperties\"], keyPointerPath)) {\n              return error;\n            }\n          }\n        } else if (this.trackUnknownProperties && !this.knownPropertyPaths[keyPointerPath]) {\n          this.unknownPropertyPaths[keyPointerPath] = true;\n        }\n      } else if (this.trackUnknownProperties) {\n        this.knownPropertyPaths[keyPointerPath] = true;\n        delete this.unknownPropertyPaths[keyPointerPath];\n      }\n    }\n    return null;\n  };\n\n  validateObjectDependencies(data, schema, dataPointerPath) {\n    let error;\n    if (schema.dependencies !== undefined) {\n      for (let depKey in schema.dependencies) {\n        if (data[depKey] !== undefined) {\n          let dep = schema.dependencies[depKey];\n          if (typeof dep === \"string\") {\n            if (data[dep] === undefined) {\n              error = this.createError(ERROR_CODES.OBJECT_DEPENDENCY_KEY, {key: depKey, missing: dep}).prefixWith(null, depKey).prefixWith(null, \"dependencies\");\n              if (this.handleError(error)) {\n                return error;\n              }\n            }\n          } else if (Array.isArray(dep)) {\n            let i = 0, l = dep.lenth;\n            for (i = 0; i < l; i++) {\n              let requiredKey = dep[i];\n              if (data[requiredKey] === undefined) {\n                error = this.createError(ERROR_CODES.OBJECT_DEPENDENCY_KEY, {key: depKey, missing: requiredKey}).prefixWith(null, \"\" + i).prefixWith(null, depKey).prefixWith(null, \"dependencies\");\n                if (this.handleError(error)) {\n                  return error;\n                }\n              }\n            }\n          } else {\n            if (error = this.validateAll(data, dep, [], [\"dependencies\", depKey], dataPointerPath)) {\n              return error;\n            }\n          }\n        }\n      }\n    }\n    return null;\n  };\n\n  validateCombinations(data, schema, dataPointerPath) {\n    return this.validateAllOf(data, schema, dataPointerPath) || this.validateAnyOf(data, schema, dataPointerPath) || this.validateOneOf(data, schema, dataPointerPath) || this.validateNot(data, schema, dataPointerPath) || null;\n  };\n\n  validateAllOf(data, schema, dataPointerPath) {\n    if (schema.allOf === undefined) {\n      return null;\n    }\n    let error;\n    let i = 0, l = schema.allOf.length;\n    for (i = 0; i < l; i++) {\n      let subSchema = schema.allOf[i];\n      if (error = this.validateAll(data, subSchema, [], [\"allOf\", i], dataPointerPath)) {\n        return error;\n      }\n    }\n    return null;\n  };\n\n  validateAnyOf(data, schema, dataPointerPath) {\n    if (schema.anyOf === undefined) {\n      return null;\n    }\n    let errors = [];\n    let startErrorCount = this.errors.length;\n    let oldUnknownPropertyPaths, oldKnownPropertyPaths;\n    if (this.trackUnknownProperties) {\n      oldUnknownPropertyPaths = this.unknownPropertyPaths;\n      oldKnownPropertyPaths = this.knownPropertyPaths;\n    }\n    let errorAtEnd = true;\n    let i = 0, l = schema.anyOf.length;\n    for (i = 0; i < l; i++) {\n      if (this.trackUnknownProperties) {\n        this.unknownPropertyPaths = {};\n        this.knownPropertyPaths = {};\n      }\n      let subSchema = schema.anyOf[i];\n\n      let errorCount = this.errors.length;\n      let error = this.validateAll(data, subSchema, [], [\"anyOf\", i], dataPointerPath);\n\n      if (error === null && errorCount === this.errors.length) {\n        this.errors = this.errors.slice(0, startErrorCount);\n\n        if (this.trackUnknownProperties) {\n          for (let knownKey in this.knownPropertyPaths) {\n            oldKnownPropertyPaths[knownKey] = true;\n            delete oldUnknownPropertyPaths[knownKey];\n          }\n          for (let unknownKey in this.unknownPropertyPaths) {\n            if (!oldKnownPropertyPaths[unknownKey]) {\n              oldUnknownPropertyPaths[unknownKey] = true;\n            }\n          }\n          // We need to continue looping so we catch all the\n          // property definitions, but we don't want to return an\n          // error\n          errorAtEnd = false;\n          continue;\n        }\n\n        return null;\n      }\n      if (error) {\n        errors.push(error.prefixWith(null, \"\" + i).prefixWith(null, \"anyOf\"));\n      }\n    }\n    if (this.trackUnknownProperties) {\n      this.unknownPropertyPaths = oldUnknownPropertyPaths;\n      this.knownPropertyPaths = oldKnownPropertyPaths;\n    }\n    if (errorAtEnd) {\n      errors = errors.concat(this.errors.slice(startErrorCount));\n      this.errors = this.errors.slice(0, startErrorCount);\n      return this.createError(ERROR_CODES.ANY_OF_MISSING, {}, \"\", \"/anyOf\", errors);\n    }\n  };\n\n  validateOneOf(data, schema, dataPointerPath) {\n    if (schema.oneOf === undefined) {\n      return null;\n    }\n    let validIndex = null;\n    let errors = [];\n    let startErrorCount = this.errors.length;\n    let oldUnknownPropertyPaths, oldKnownPropertyPaths;\n    if (this.trackUnknownProperties) {\n      oldUnknownPropertyPaths = this.unknownPropertyPaths;\n      oldKnownPropertyPaths = this.knownPropertyPaths;\n    }\n    let i = 0, l = schema.oneOf.length;\n    for (i = 0; i < l; i++) {\n      if (this.trackUnknownProperties) {\n        this.unknownPropertyPaths = {};\n        this.knownPropertyPaths = {};\n      }\n      let subSchema = schema.oneOf[i];\n\n      let errorCount = this.errors.length;\n      let error = this.validateAll(data, subSchema, [], [\"oneOf\", i], dataPointerPath);\n\n      if (error === null && errorCount === this.errors.length) {\n        if (validIndex === null) {\n          validIndex = i;\n        } else {\n          this.errors = this.errors.slice(0, startErrorCount);\n          return this.createError(ERROR_CODES.ONE_OF_MULTIPLE, {index1: validIndex, index2: i}, \"\", \"/oneOf\");\n        }\n        if (this.trackUnknownProperties) {\n          for (let knownKey in this.knownPropertyPaths) {\n            oldKnownPropertyPaths[knownKey] = true;\n            delete oldUnknownPropertyPaths[knownKey];\n          }\n          for (let unknownKey in this.unknownPropertyPaths) {\n            if (!oldKnownPropertyPaths[unknownKey]) {\n              oldUnknownPropertyPaths[unknownKey] = true;\n            }\n          }\n        }\n      } else if (error) {\n        errors.push(error);\n      }\n    }\n    if (this.trackUnknownProperties) {\n      this.unknownPropertyPaths = oldUnknownPropertyPaths;\n      this.knownPropertyPaths = oldKnownPropertyPaths;\n    }\n    if (validIndex === null) {\n      errors = errors.concat(this.errors.slice(startErrorCount));\n      this.errors = this.errors.slice(0, startErrorCount);\n      return this.createError(ERROR_CODES.ONE_OF_MISSING, {}, \"\", \"/oneOf\", errors);\n    } else {\n      this.errors = this.errors.slice(0, startErrorCount);\n    }\n    return null;\n  };\n\n  validateNot(data, schema, dataPointerPath) {\n    if (schema.not === undefined) {\n      return null;\n    }\n    let oldErrorCount = this.errors.length;\n    let oldUnknownPropertyPaths, oldKnownPropertyPaths;\n    if (this.trackUnknownProperties) {\n      oldUnknownPropertyPaths = this.unknownPropertyPaths;\n      oldKnownPropertyPaths = this.knownPropertyPaths;\n      this.unknownPropertyPaths = {};\n      this.knownPropertyPaths = {};\n    }\n    let error = this.validateAll(data, schema.not, null, null, dataPointerPath);\n    let notErrors = this.errors.slice(oldErrorCount);\n    this.errors = this.errors.slice(0, oldErrorCount);\n    if (this.trackUnknownProperties) {\n      this.unknownPropertyPaths = oldUnknownPropertyPaths;\n      this.knownPropertyPaths = oldKnownPropertyPaths;\n    }\n    if (error === null && notErrors.length === 0) {\n      return this.createError(ERROR_CODES.NOT_PASSED, {}, \"\", \"/not\");\n    }\n    return null;\n  };\n\n  validateHypermedia(data, schema, dataPointerPath) {\n    if (!schema.links) {\n      return null;\n    }\n    let error;\n    let i = 0, l = schema.links.length;\n    for (i = 0; i < l; i++) {\n      let ldo = schema.links[i];\n      if (ldo.rel === \"describedby\") {\n        let template = new UriTemplate(ldo.href);\n        let allPresent = true;\n        let j = 0, ll = template.varNames.length;\n        for (j = 0; j < ll; j++) {\n          if (!(template.varNames[j] in data)) {\n            allPresent = false;\n            break;\n          }\n        }\n        if (allPresent) {\n          let schemaUrl = template.fillFromObject(data);\n          let subSchema = {\"$ref\": schemaUrl};\n          if (error = this.validateAll(data, subSchema, [], [\"links\", i], dataPointerPath)) {\n            return error;\n          }\n        }\n      }\n    }\n  };\n};\n\nexport default ValidatorContext = ValidatorContext;\n"],"sourceRoot":""}